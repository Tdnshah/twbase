<?php

/**
 * @file
 * TWBase theme file.
 */

use Drupal\Component\Utility\Html;
// use Drupal\Core\Entity\EntityInterface;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\node\Entity\NodeType;
// Only add if you need to generate an image URL with an image style
use Drupal\image\Entity\ImageStyle;


/**
 * Override or insert variables into the page templates.
 */
function twbase_preprocess_html(&$variables) {
  //
  // Configuring the classes for the Showcase region
  //
  $variables['header_fixed'] = theme_get_setting('header_fixed');
  $variables['has_showcase'] = FALSE;
  if(isset($variables['node_type'])) {
    if($node = \Drupal::request()->attributes->get('node')) {
      $config = \Drupal::config('twbase.settings');
      // $type = NodeType::load($variables['node_type']);
      $default_showcase_enabled = $config->get('default_showcase_enabled');
      $variables['has_showcase'] = $default_showcase_enabled;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twbase_preprocess_page_title(&$variables) {
  $variables['content_size'] = theme_get_setting('content_size');
  $variables['hide_title'] = FALSE;

  $config = \Drupal::config('twbase.settings');
  $default_showcase_enabled = $config->get('default_showcase_enabled');
  $default_display_title = $config->get('default_showcase_display_title');

  if($node = \Drupal::request()->attributes->get('node')) {
    if($default_showcase_enabled and $default_display_title) {
      $variables['hide_title'] = TRUE;
    }
  }
  elseif(\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['hide_title'] = FALSE;
    $title = \Drupal::service('token')->replace(t('Welcome to [site:name]'));
    $variables['title']['#markup'] = $title;
  }
}

/**
 * Override or insert variables into the page templates.
 */
function twbase_preprocess_page(&$variables) {
  $variables['header_fixed'] = theme_get_setting('header_fixed');
  $variables['header_size'] = theme_get_setting('header_size');
  $variables['navbar_size'] = theme_get_setting('navbar_size');
  $variables['content_size'] = theme_get_setting('content_size');
  $variables['wide_content_size'] = theme_get_setting('pre_footer_size');
  $variables['pre_footer_size'] = theme_get_setting('pre_footer_size');
  $variables['footer_size'] = theme_get_setting('footer_size');

  // Check if the default Showcase is enabled
  $config = \Drupal::config('twbase.settings');
  $default_showcase_enabled = $config->get('default_showcase_enabled');
  $variables['has_showcase'] = $default_showcase_enabled;
  if($default_showcase_enabled) {
    // Classes for the Showcase
    $variables['showcase_size'] = theme_get_setting('showcase_hero_size');
    $variables['showcase_content_pos'] = theme_get_setting('showcase_content_pos');
    $variables['showcase_add_overlay'] = theme_get_setting('showcase_add_overlay');
    $variables['showcase_overlay_type'] = theme_get_setting('showcase_overlay_type');
    $variables['showcase_add_deco'] = theme_get_setting('showcase_deco');
    $variables['showcase_add_front_deco'] = theme_get_setting('showcase_deco_front');

    // Default showcase content
    _twbase_get_default_showcase($variables);
  }

  //
  // Configuring the breadcrump
  //
  $variables['breadcrumb_display'] = theme_get_setting('breadcrumb_display');

  // Themes improperly check renderable arrays when determining visibility see
  // issues https://www.drupal.org/project/drupal/issues/953034#comment-14214288
  // Check if content_top is empty or not
  $has_content_top = !empty(trim(strip_tags(\Drupal::service('renderer')->renderRoot($variables['page']['content_top']))));
  $variables['has_content_top'] = $has_content_top;

  // kint($variables);die;
}

/**
 * Override or insert variables into the node templates.
 */
function twbase_preprocess_node(&$variables) {
  // $variables['default_content'] = TRUE;

  $variables['content_size'] = theme_get_setting('content_size');

  // $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  // $variables['language'] = $language;

  // kint($variables);die;
}

/**
 * Override or insert variables into the node templates.
 */
// function twbase_preprocess_paragraph(&$variables) {
// }

/**
 * Implements hook_preprocess_field__field_name().
 */
function twbase_preprocess_field__field_tags(&$variables) {
  // kint($variables);die;
  $items = $variables['items'];
  foreach ($items as $key => $item) {
    $variables['items'][$key]['content']['#options']['attributes']['class'] = ['tag-link'];
  }
}


/**
 * @TODO: Split this un sub function
 * Override or insert variables into the banner region.
 * NOTE: that this regggion is hidden in the block system admin page
 *
 * @param $variables
 *   An array of variables to pass to the theme template.
 */
//* -- Delete this line if you want to use this function
function _twbase_get_default_showcase(&$variables) {
  $variables['showcase'] = FALSE;

  if(isset($variables['node'])) {
    $config = \Drupal::config('twbase.settings');

    // Get the default showcase enabled status
    $default_showcase_enabled = $config->get('default_showcase_enabled');
    // Leave from here if the default showcase is not enabled
    if (!$default_showcase_enabled) return;

    /* @var Drupal\node\Entity\Node $node */
    $node = $variables['node'];
    // Get node type definition
    $type = NodeType::load($node->bundle());

    // Build an array of datas to return for the showcase
    $variables['showcase'] = [
      'title' => FALSE,
      'introduction' => FALSE,
      'submitted' => [],
      'image_path' => FALSE,
    ];

    // Get the default showcase display title status
    $default_display_title = $config->get('default_showcase_display_title');
    if($default_display_title) {
      $title = $node->label();
      // $variables['showcase']['title'] = $title;
      $variables['showcase']['title'] = $title;
    }

    // Add Submitted informations (username, user picture, created date)
    $default_showcase_display_submitted = $config->get('default_showcase_display_submitted');
    if($default_showcase_display_submitted &&  $type->displaySubmitted()) {
      // Username
      $author = $node->getOwner();
      $variables['showcase']['submitted']['author']['name'] = $author->getDisplayName();

      // User picture if available
      $user_picture = $node->getOwner()->user_picture;
      if($user_picture && isset($user_picture[0])) {
        // Get origin image URI
        $picture_uri = $user_picture->entity->getFileUri();
        // Load image style "thumbnail" and build URL
        $picture_url = ImageStyle::load('thumbnail')->buildUrl($picture_uri);
        $variables['showcase']['submitted']['author']['picture'] = $picture_url;
      }

      // Created date
      $node_created = $node->getCreatedTime();
      $submitted = \Drupal::service('date.formatter')->format($node_created);
      $variables['showcase']['submitted']['created'] = $submitted;
    }

    // // Add Introduction or Summary
    // if(!isset($introduction[0])) {
    //   // This is defined in showcase_front template, so remove it
    //   if($node->bundle() == 'homepage') {
    //     $introduction['#markup'] = "Block teaser: Regardez autour de vous, this is Bolt's default 2021 theme. To edit your site's content, go login with your username and password. Documentation, examples and support are available on the official Bolt website.";
    //     $variables['showcase']['introduction'] = $introduction;
    //   }
    //   else {
    //     // $entity_label = $node->type->entity->label();
    //     // $empty_introduction = [
    //     //   '#markup' => '<p>@TODO - ' . $entity_label . ': ' . 'CHANGE TO BODY SUMMARY</p',
    //     // ];
    //     // $introduction = $empty_introduction;
    //     // $introduction = FALSE;

    //   }
    // }

    // Add Image, Cover, Photos or Video
    $image_path = FALSE;
    // Get the default showcase display title status
    $default_display_image = $config->get('default_showcase_display_image');
    if($default_display_image) {
      if($node->hasField('field_image') && isset($node->get('field_image')[0])) {
        // Get URI of the image file.
        $image_path = file_create_url($node->field_image->entity->getFileUri());
        // With the URI, generate a url for non-image style background image.
        $image_path = file_url_transform_relative($image_path);
      }
    }

    $variables['showcase']['image_path'] = $image_path;
  }
}
